Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 

Constraints:

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.
 

Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?


Solution 1
-----------
A really brute force way would be to search for all possible pairs of numbers but that would be too slow.
 Again, it's best to try out brute force solutions for just for completeness. 
 It is from these brute force solutions that you can come up with optimizations.

Solution 2
-----------
So, if we fix one of the numbers, say x, we have to scan the entire array to find the next number y 
which is value - x where value is the input parameter. Can we change our array somehow so that this
 search becomes faster?
 
This issue can be solved in linear time. The concept is to utilise a hashmap to record the indices of previously visited items. The “key” of a hashmap is the number in the specified input array (You add this to the hashmap as you visit each element). The index of the number in the array represented by the hashmap key is the hashmap “value.”

This method performs the following stages for a given input array:

Make a hashmap with integer datatypes as keys and values.
Iterate through each element in the specified array, beginning with the first.
Check the hashmap for the presence of the needed number (required number = goal sum – current number) in each iteration.
If present, return the result necessary number index, current number index.
Otherwise, add the current iteration number as a key to the hashmap and its index as a value. Repeat until you discover the answer.

Solution 3
-----------
The second train of thought is, without changing the array, can we use additional space somehow?
 Like maybe a hash map to speed up the search?
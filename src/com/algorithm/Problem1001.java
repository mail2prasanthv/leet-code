package com.algorithm;

import java.util.HashMap;
import java.util.Map;

public class Problem1001 {
	public static void main(String[] args) {
		
		int[] nums = new int[]{1, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,1, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,1, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,1, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,1, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,1, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,1, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,1, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,1, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,1, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,1, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,1, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,1, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,1, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,1, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,1, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9,9, 2,3,4,5,6,7,8,1, 2,3,4,5,6,7,8,9};
		int target =19;
		long startMethod1 = System.currentTimeMillis();
		bruteForcetwoSum(nums,target);
		long endMethod1 = System.currentTimeMillis();
		
		nums = new int[]{1, 2,3,4,5,6,7,8,9,10};
		long startMethod2 = System.currentTimeMillis();
		best1twoSum(nums,target);
		long endMethod2 = System.currentTimeMillis();
		
		System.out.println("Method 1: Time Taken MS: " + (endMethod1 - startMethod1));
		System.out.println("Method 2: Time Taken MS: " + (endMethod2 - startMethod2));
	}
public static int[] bruteForcetwoSum(int[] nums, int target) {
	int[] indices = new int[2];
	// Complexity of O(n^2)
	for (int i=0; i< nums.length; i++) {
		for (int j=i+1; j< nums.length; j++) {
			if(nums[i] + nums[j] ==target ) {
				indices[0] = i;
				indices[1] = j;
				return indices;
			}
		}
	}
	return indices;
        
    }
public static int[] best1twoSum(int[] nums, int target) {
    //Complexity of O(n)
	  int n=nums.length;
      Map<Integer,Integer> map=new HashMap<>();
      int[] result=new int[2];
      for(int i=0;i<n;i++){
          if(map.containsKey(target-nums[i])){
              result[1]=i;
              result[0]=map.get(target-nums[i]);
              return result;
          }
          map.put(nums[i],i);
      }
      return result;
}

}
